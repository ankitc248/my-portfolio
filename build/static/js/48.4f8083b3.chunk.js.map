{"version":3,"file":"static/js/48.4f8083b3.chunk.js","mappings":"kMAKe,SAASA,IACtB,MAAMC,EAAcC,EAAAA,EAAAA,GAAAA,GAQpB,OAPAC,EAAAA,EAAAA,YAAU,MACRC,EAAAA,EAAAA,GAAW,YAAa,CACtBC,WAAY,OACZC,OAAQ,GACRC,aAAc,KACd,GACD,KAEDC,EAAAA,EAAAA,MAAA,WAASC,UAAU,eAAcC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,sBAAqBC,SAAC,sDAGnCC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAChBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAEhBR,EAAYW,KAAI,CAACC,EAAMC,KACtBN,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAL,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAEG,EAAKG,YACpCR,EAAAA,EAAAA,MAAA,OACEC,UAAU,YAEVQ,MAAO,CAAEC,eAAe,GAADC,OAAa,GAARL,EAAW,MAAMJ,SAAA,EAE7CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OACEF,UAAU,wBACVW,IAAKP,EAAKQ,YACVC,IAAI,eAENX,EAAAA,EAAAA,KAAA,QAAMF,UAAU,gBAAeC,SAAEG,EAAKU,oBAExCf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,QAAOC,SAAA,CAClBG,EAAKW,OACNb,EAAAA,EAAAA,KAAA,KAAAD,SAAIG,EAAKY,eAGXd,EAAAA,EAAAA,KAAA,KAAAD,UAAIgB,EAAAA,EAAAA,GAAcb,EAAKc,cAjBpBd,EAAKW,iBAyBxB,C,8CCrDA,MAMME,EAAiBE,IACrB,MAAMC,EAAQD,EAAYE,MAAM,oBAAoBC,OAAOC,SAC3D,OACErB,EAAAA,EAAAA,KAAA,QAAAD,SACGmB,EAAMjB,KAAI,CAACqB,EAAMnB,KAChB,GAAImB,EAAKC,WAAW,MAAQD,EAAKE,SAAS,KAAM,CAC9C,MAAOC,EAAMC,GAAQJ,EAAKK,MAAM,GAAI,GAAGR,MAAM,KAC7C,OACEnB,EAAAA,EAAAA,KAAA,KAEE0B,KAAMA,EACNE,OAAO,SACP9B,UAAU,cACV+B,IAAI,aAAY9B,SAEf0B,GANItB,EASX,CAEA,OADiBmB,EAAKH,MAAM,gBAAgBC,OAAOC,SACnCpB,KAAI,CAAC6B,EAASC,IACxBD,EAAQP,WAAW,MAAQO,EAAQN,SAAS,MAE5CxB,EAAAA,EAAAA,KAAA,QAAqBF,UAAU,cAAaC,SACzC+B,EAAQH,MAAM,GAAI,IADVI,GAKRD,GACP,KAEC,C","sources":["components/Work.jsx","helpers/Helpers.js"],"sourcesContent":["import PortfolioDetails from \"../PortfolioDetails.json\";\r\nimport { transformText } from \"../helpers/Helpers\";\r\nimport mediumZoom from \"medium-zoom\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function Work() {\r\n  const workDetails = PortfolioDetails.sections.workExperience.content;\r\n  useEffect(() => {\r\n    mediumZoom(\".zoomable\", {\r\n      background: \"#000\",\r\n      margin: 10,\r\n      scrollOffset: 100,\r\n    });\r\n  }, []);\r\n  return (\r\n    <section className=\"work-section\">\r\n      <p className=\"section-description\">\r\n        Pursuit of purpose through effort and dedication\r\n      </p>\r\n      <span className=\"separator\"></span>\r\n      <div className=\"work-grid\">\r\n        <div className=\"timeline\">\r\n          <div className=\"timeline-filler\"></div>\r\n        </div>\r\n        {workDetails.map((work, index) => (\r\n          <>\r\n            <div className=\"date-sticker\">{work.fullDate}</div>\r\n            <div\r\n              className=\"work-card\"\r\n              key={work.title}\r\n              style={{ animationDelay: `${index * 0.1}s` }}\r\n            >\r\n              <div className=\"image-container\">\r\n                <img\r\n                  className=\"banner-image zoomable\"\r\n                  src={work.bannerImage}\r\n                  alt=\"education\"\r\n                />\r\n                <span className=\"image-caption\">{work.bannerCaption}</span>\r\n              </div>\r\n              <div className=\"education-card-body\">\r\n                <h2 className=\"title\">\r\n                  {work.title}\r\n                  <p>{work.subTitle}</p>\r\n                </h2>\r\n                {/* <p>{work.subTitle}</p> */}\r\n                <p>{transformText(work.about)}</p>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","// Utility functions\r\nconst sortObjectByKeyAndConvertToArray = (obj, key) => {\r\n  const array = Object.entries(obj);\r\n  array.sort((a, b) => a[1][key] - b[1][key]);\r\n  return array;\r\n};\r\n\r\nconst transformText = (inputString) => {\r\n  const parts = inputString.split(/(@[^@]+@[^@]+@)/g).filter(Boolean);\r\n  return (\r\n    <span>\r\n      {parts.map((part, index) => {\r\n        if (part.startsWith(\"@\") && part.endsWith(\"@\")) {\r\n          const [text, href] = part.slice(1, -1).split(\"@\");\r\n          return (\r\n            <a\r\n              key={index}\r\n              href={href}\r\n              target=\"_blank\"\r\n              className=\"inline-link\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              {text}\r\n            </a>\r\n          );\r\n        }\r\n        const subParts = part.split(/(\\*[^*]+\\*)/g).filter(Boolean);\r\n        return subParts.map((subPart, subIndex) => {\r\n          if (subPart.startsWith(\"*\") && subPart.endsWith(\"*\")) {\r\n            return (\r\n              <span key={subIndex} className=\"highlighted\">\r\n                {subPart.slice(1, -1)}\r\n              </span>\r\n            );\r\n          }\r\n          return subPart;\r\n        });\r\n      })}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport { sortObjectByKeyAndConvertToArray, transformText };\r\n"],"names":["Work","workDetails","PortfolioDetails","useEffect","mediumZoom","background","margin","scrollOffset","_jsxs","className","children","_jsx","map","work","index","_Fragment","fullDate","style","animationDelay","concat","src","bannerImage","alt","bannerCaption","title","subTitle","transformText","about","inputString","parts","split","filter","Boolean","part","startsWith","endsWith","text","href","slice","target","rel","subPart","subIndex"],"sourceRoot":""}